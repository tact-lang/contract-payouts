#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: TryPayout
;; Header: 0x60912f1f
;; TLB: try_payout#60912f1f address:address value:coins = TryPayout
;;

(slice, ((slice, int))) $TryPayout$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1620127519);
    var v'address = sc_0~__tact_load_address();
    var v'value = sc_0~load_coins();
    return (sc_0, (v'address, v'value));
}

;;
;; Type: PayoutOk
;; Header: 0xd90aaa12
;; TLB: payout_ok#d90aaa12 address:address value:coins = PayoutOk
;;

builder $PayoutOk$_store(builder build_0, (slice, int) v) inline {
    var (v'address, v'value) = v;
    build_0 = store_uint(build_0, 3641354770, 32);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_coins(v'value);
    return build_0;
}

cell $PayoutOk$_store_cell((slice, int) v) inline {
    return $PayoutOk$_store(begin_cell(), v).end_cell();
}

((slice, int)) $PayoutOk$_constructor_value_address(int value, slice address) inline {
    return (address, value);
}

;;
;; Type: PayoutFailed
;; Header: 0x25bd488e
;; TLB: payout_failed#25bd488e address:address value:coins = PayoutFailed
;;

builder $PayoutFailed$_store(builder build_0, (slice, int) v) inline {
    var (v'address, v'value) = v;
    build_0 = store_uint(build_0, 633161870, 32);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_coins(v'value);
    return build_0;
}

cell $PayoutFailed$_store_cell((slice, int) v) inline {
    return $PayoutFailed$_store(begin_cell(), v).end_cell();
}

((slice, int)) $PayoutFailed$_constructor_value_address(int value, slice address) inline {
    return (address, value);
}

;;
;; Type: PayoutBeacon
;;

builder $PayoutBeacon$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'owner, v'master, v'completed) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = build_0.store_int(v'completed, 1);
    return build_0;
}

(slice, ((slice, slice, int))) $PayoutBeacon$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'master = sc_0~__tact_load_address();
    var v'completed = sc_0~load_int(1);
    return (sc_0, (v'owner, v'master, v'completed));
}

(slice, ((slice, slice))) $PayoutBeacon$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'master = sc_0~__tact_load_address();
    return (sc_0, (v'owner, v'master));
}

(slice, slice, int) $PayoutBeacon$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$PayoutBeacon$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, slice master) = $sc~$PayoutBeacon$init$_load();
        $sc.end_parse();
        return $PayoutBeacon$_contract_init(owner, master);
    }
}

() $PayoutBeacon$_contract_store((slice, slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $PayoutBeacon$_store(b, v);
    set_data(b.end_cell());
}