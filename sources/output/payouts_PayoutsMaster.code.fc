#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "payouts_PayoutsMaster.headers.fc";
#include "payouts_PayoutsMaster.stdlib.fc";
#include "payouts_PayoutsMaster.constants.fc";
#include "payouts_PayoutsMaster.storage.fc";

;;
;; Contract PayoutsMaster functions
;;

(slice, int, int, tuple) $PayoutsMaster$_contract_init(slice $owner, int $publicKey, tuple $burn) impure inline_ref {
    var ($burn) = $burn;
    var (($self'owner, $self'publicKey, $self'stopped, $self'burn)) = (null(), null(), null(), null());
    $self'owner = $owner;
    $self'publicKey = $publicKey;
    $self'stopped = false;
    $self'burn = $burn;
    if ((~ null?($burn))) {
        var ($b'startAt, $b'endAt) = $BurnParameters$_not_null($burn);
        throw_unless(12724, ($b'startAt < $b'endAt));
    }
    return ($self'owner, $self'publicKey, $self'stopped, $self'burn);
}

((slice, int, int, tuple), int) $PayoutsMaster$_fun_publicKey((slice, int, int, tuple) $self) impure inline_ref {
    var (($self'owner, $self'publicKey, $self'stopped, $self'burn)) = $self;
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), $self'publicKey);
}

((slice, int, int, tuple), tuple) $PayoutsMaster$_fun_burn((slice, int, int, tuple) $self) impure inline_ref {
    var (($self'owner, $self'publicKey, $self'stopped, $self'burn)) = $self;
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), $self'burn);
}

((slice, int, int, tuple), ()) $PayoutsMaster$_fun_requireOwner((slice, int, int, tuple) $self) impure inline_ref {
    var (($self'owner, $self'publicKey, $self'stopped, $self'burn)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

((slice, int, int, tuple), slice) $PayoutsMaster$_fun_owner((slice, int, int, tuple) $self) impure inline_ref {
    var (($self'owner, $self'publicKey, $self'stopped, $self'burn)) = $self;
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), $self'owner);
}

((slice, int, int, tuple), ()) $PayoutsMaster$_fun_requireNotStopped((slice, int, int, tuple) $self) impure inline_ref {
    var (($self'owner, $self'publicKey, $self'stopped, $self'burn)) = $self;
    throw_unless(40368, (~ $self'stopped));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

((slice, int, int, tuple), ()) $PayoutsMaster$_fun_requireStopped((slice, int, int, tuple) $self) impure inline_ref {
    var (($self'owner, $self'publicKey, $self'stopped, $self'burn)) = $self;
    throw_unless(53296, $self'stopped);
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

((slice, int, int, tuple), int) $PayoutsMaster$_fun_stopped((slice, int, int, tuple) $self) impure inline_ref {
    var (($self'owner, $self'publicKey, $self'stopped, $self'burn)) = $self;
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), $self'stopped);
}

;;
;; Receivers of a Contract PayoutsMaster
;;

((slice, int, int, tuple), ()) $PayoutsMaster$_internal_any_text((slice, int, int, tuple) $self, slice $withdraw) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_requireNotStopped();
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(16059, ($ctx'value >= 1000000000));
    slice $msg = $String$_fun_fromBase64($withdraw);
    slice $signature = $msg~load_bits(512);
    int $value = $msg~load_coins();
    cell $sigCell = end_cell(store_coins(__tact_store_address(begin_cell(), $ctx'sender), $value));
    int $hash = cell_hash($sigCell);
    throw_unless(48401, check_signature($hash, $signature, $self'publicKey));
    if ((~ null?($self'burn))) {
        var ($burn'startAt, $burn'endAt) = $BurnParameters$_not_null($self'burn);
        int $now = now();
        if (($burn'endAt <= $now)) {
            ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_reply(__gen_cell_comment_d1fc74c13be089b6bea8cf835da140f1b590ac5f89c5040f9ddfc30f5dd5e70d());
            return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
        }
        if (($now >= $burn'startAt)) {
            $value = (($value * ($burn'endAt - $now)) / ($burn'endAt - $burn'startAt));
        }
    }
    throw_unless(57826, ($value >= 1000000000));
    throw_unless(19204, (__tact_my_balance() > ((1000000000 + 100000000) + $value)));
    var ($init'code, $init'data) = $PayoutBeacon$_init_child(__tact_context_sys, $ctx'sender, my_address());
    slice $address = $global_contractAddress(($init'code, $init'data));
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_forward($address, $TryPayout$_store_cell($TryPayout$_constructor_address_value($ctx'sender, $value)), true, $StateInit$_as_optional(($init'code, $init'data)));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

(((slice, int, int, tuple)), ()) $PayoutsMaster$_internal_binary_PayoutOk((slice, int, int, tuple) $self, (slice, int) $ok) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    var ($ok'address, $ok'value) = $ok;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_requireNotStopped();
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    var ($init'code, $init'data) = $PayoutBeacon$_init_child(__tact_context_sys, $ok'address, my_address());
    slice $beaconAddress = $global_contractAddress(($init'code, $init'data));
    throw_unless(4429, ( __tact_slice_eq_bits($beaconAddress, $ctx'sender) ));
    throw_unless(19204, (__tact_my_balance() > ((1000000000 + 100000000) + $ok'value)));
    $global_emit($EventPayoutCompleted$_store_cell($EventPayoutCompleted$_constructor_address_value($ok'address, $ok'value)));
    $global_send($SendParameters$_constructor_value_mode_to_body($ok'value, 64, $ok'address, __gen_cell_comment_09ca5c59d7594cc794635e7b267be70795937c6d0366ed0164c412595b6eec6e()));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

(((slice, int, int, tuple)), ()) $PayoutsMaster$_internal_binary_PayoutFailed((slice, int, int, tuple) $self, (slice, int) $failed) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    var ($failed'address, $failed'value) = $failed;
    $global_send($SendParameters$_constructor_value_mode_to_body($failed'value, 64, $failed'address, __gen_cell_comment_51a60a895442bd331fe75161305b2afbe04d33f1cd6cf8a1649e028f992eb33c()));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

((slice, int, int, tuple), ()) $PayoutsMaster$_internal_text_2dcb19a5b89db9d3377fc651c6f9b6b92db9be624060c62a50572cdc97968638((slice, int, int, tuple) $self) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(16059, ($ctx'value >= 1000000000));
    $global_send($SendParameters$_constructor_value_mode_to_bounce_body(100000000, 2, $ctx'sender, false, __gen_cell_comment_13c8d1a083e5ccb8cf7681be11c1ed303c4a19cb0110663a87e8c3fc525c2879()));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

((slice, int, int, tuple), ()) $PayoutsMaster$_internal_text_250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca((slice, int, int, tuple) $self) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_requireOwner();
    raw_reserve(100000000, 0);
    $global_send($SendParameters$_constructor_value_mode_to_bounce_body(0, 128, $self'owner, false, __gen_cell_comment_f7b1ab6077945b37370a1550574675180cf87df4cb047c869746812a83667d4c()));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

((slice, int, int, tuple), ()) $PayoutsMaster$_internal_text_986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d((slice, int, int, tuple) $self) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_requireOwner();
    $global_send($SendParameters$_constructor_value_mode_to_bounce_body(0, (128 + 32), $self'owner, false, __gen_cell_comment_d0eb08c41bdebaa57d4264bc1d1a8ce09adbf409ec16ee54951457d71e3e04e9()));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

(((slice, int, int, tuple)), ()) $PayoutsMaster$_internal_binary_Deploy((slice, int, int, tuple) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

((slice, int, int, tuple), ()) $PayoutsMaster$_internal_text_6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df((slice, int, int, tuple) $self) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_requireOwner();
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_requireStopped();
    $self'stopped = false;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_reply(__gen_cell_comment_514f593ead485926515219a03034c6b162f1c29390f83f2f1bd70b8b77731ec3());
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

((slice, int, int, tuple), ()) $PayoutsMaster$_internal_text_bcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501((slice, int, int, tuple) $self) impure inline {
    var ($self'owner, $self'publicKey, $self'stopped, $self'burn) = $self;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_requireOwner();
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_requireNotStopped();
    $self'stopped = true;
    ($self'owner, $self'publicKey, $self'stopped, $self'burn)~$PayoutsMaster$_fun_reply(__gen_cell_comment_8f4b6a166554b4f282855d0333c627d5b58d281ea4ba11e4def91a1053193b2d());
    return (($self'owner, $self'publicKey, $self'stopped, $self'burn), ());
}

;;
;; Get methods of a Contract PayoutsMaster
;;

_ %publicKey() method_id(86520) {
    var self = $PayoutsMaster$_contract_load();
    var res = self~$PayoutsMaster$_fun_publicKey();
    return res;
}

_ %burn() method_id(91153) {
    var self = $PayoutsMaster$_contract_load();
    var res = self~$PayoutsMaster$_fun_burn();
    return $BurnParameters$_to_opt_external(res);
}

_ %owner() method_id(83229) {
    var self = $PayoutsMaster$_contract_load();
    var res = self~$PayoutsMaster$_fun_owner();
    return res;
}

_ %stopped() method_id(74107) {
    var self = $PayoutsMaster$_contract_load();
    var res = self~$PayoutsMaster$_fun_stopped();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128,
        "org.ton.resumable"H >> 128,
        "org.ton.stoppable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmWSyiRWxLEK7zFhUiSDU6npWebDJ9pYNqxSJeoA11MvJg";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract PayoutsMaster
;;

((slice, int, int, tuple), int) $PayoutsMaster$_contract_router_internal((slice, int, int, tuple) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive PayoutOk message
    if (op == 3641354770) {
        var msg = in_msg~$PayoutOk$_load();
        self~$PayoutsMaster$_internal_binary_PayoutOk(msg);
        return (self, true);
    }
    
    ;; Receive PayoutFailed message
    if (op == 633161870) {
        var msg = in_msg~$PayoutFailed$_load();
        self~$PayoutsMaster$_internal_binary_PayoutFailed(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$PayoutsMaster$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Deposit" message
        if (text_op == 0x2dcb19a5b89db9d3377fc651c6f9b6b92db9be624060c62a50572cdc97968638) {
            self~$PayoutsMaster$_internal_text_2dcb19a5b89db9d3377fc651c6f9b6b92db9be624060c62a50572cdc97968638();
            return (self, true);
        }
        
        ;; Receive "Withdraw" message
        if (text_op == 0x250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca) {
            self~$PayoutsMaster$_internal_text_250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca();
            return (self, true);
        }
        
        ;; Receive "Destroy" message
        if (text_op == 0x986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d) {
            self~$PayoutsMaster$_internal_text_986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d();
            return (self, true);
        }
        
        ;; Receive "Resume" message
        if (text_op == 0x6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df) {
            self~$PayoutsMaster$_internal_text_6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df();
            return (self, true);
        }
        
        ;; Receive "Stop" message
        if (text_op == 0xbcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501) {
            self~$PayoutsMaster$_internal_text_bcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501();
            return (self, true);
        }
        if (slice_bits(in_msg) >= 32) {
            self~$PayoutsMaster$_internal_any_text(in_msg.skip_bits(32));
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $PayoutsMaster$_contract_load();
    
    ;; Handle operation
    int handled = self~$PayoutsMaster$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $PayoutsMaster$_contract_store(self);
}
