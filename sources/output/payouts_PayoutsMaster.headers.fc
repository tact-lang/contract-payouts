#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;;
;; Header files for PayoutsMaster
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $TryPayout$_store
builder $TryPayout$_store(builder build_0, (slice, int) v) inline;

;; $TryPayout$_store_cell
cell $TryPayout$_store_cell((slice, int) v) inline;

;; $PayoutOk$_load
(slice, ((slice, int))) $PayoutOk$_load(slice sc_0) inline;

;; $PayoutFailed$_load
(slice, ((slice, int))) $PayoutFailed$_load(slice sc_0) inline;

;; $BurnParameters$_store
builder $BurnParameters$_store(builder build_0, (int, int) v) inline;

;; $BurnParameters$_load
(slice, ((int, int))) $BurnParameters$_load(slice sc_0) inline;

;; $BurnParameters$_not_null
((int, int)) $BurnParameters$_not_null(tuple v) inline;

;; $PayoutsMaster$_store
builder $PayoutsMaster$_store(builder build_0, (slice, int, int, tuple) v) inline;

;; $BurnParameters$_as_optional
tuple $BurnParameters$_as_optional((int, int) v) inline;

;; $PayoutsMaster$_load
(slice, ((slice, int, int, tuple))) $PayoutsMaster$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StateInit$_as_optional
tuple $StateInit$_as_optional((cell, cell) v) inline;

;; $PayoutBeacon$init$_store
builder $PayoutBeacon$init$_store(builder build_0, (slice, slice) v) inline;

;; $PayoutsMaster$init$_load
(slice, ((slice, int, tuple))) $PayoutsMaster$init$_load(slice sc_0) inline;

;; $PayoutsMaster$_contract_init
(slice, int, int, tuple) $PayoutsMaster$_contract_init(slice $owner, int $publicKey, tuple $burn) impure inline_ref;

;; $PayoutsMaster$_contract_load
(slice, int, int, tuple) $PayoutsMaster$_contract_load() impure inline_ref;

;; $PayoutsMaster$_contract_store
() $PayoutsMaster$_contract_store((slice, int, int, tuple) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $Slice$_fun_fromBase64
slice $Slice$_fun_fromBase64(slice $self) impure inline_ref;

;; $String$_fun_fromBase64
slice $String$_fun_fromBase64(slice $self) impure inline;

;; $PayoutBeacon$_init_child
(cell, cell) $PayoutBeacon$_init_child(cell sys', slice $owner, slice $master) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $PayoutsMaster$_fun_forward
((slice, int, int, tuple), ()) $PayoutsMaster$_fun_forward((slice, int, int, tuple) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $PayoutsMaster$_fun_reply
((slice, int, int, tuple), ()) $PayoutsMaster$_fun_reply((slice, int, int, tuple) $self, cell $body) impure inline;

;; $PayoutsMaster$_fun_notify
((slice, int, int, tuple), ()) $PayoutsMaster$_fun_notify((slice, int, int, tuple) $self, cell $body) impure inline;

;; $PayoutsMaster$_fun_requireOwner
((slice, int, int, tuple), ()) $PayoutsMaster$_fun_requireOwner((slice, int, int, tuple) $self) impure inline_ref;

;; $PayoutsMaster$_fun_owner
((slice, int, int, tuple), slice) $PayoutsMaster$_fun_owner((slice, int, int, tuple) $self) impure inline_ref;

;; $PayoutsMaster$_fun_requireNotStopped
((slice, int, int, tuple), ()) $PayoutsMaster$_fun_requireNotStopped((slice, int, int, tuple) $self) impure inline_ref;

;; $PayoutsMaster$_fun_requireStopped
((slice, int, int, tuple), ()) $PayoutsMaster$_fun_requireStopped((slice, int, int, tuple) $self) impure inline_ref;

;; $PayoutsMaster$_fun_stopped
((slice, int, int, tuple), int) $PayoutsMaster$_fun_stopped((slice, int, int, tuple) $self) impure inline_ref;

;; $TryPayout$_constructor_address_value
((slice, int)) $TryPayout$_constructor_address_value(slice address, int value) inline;

;; $SendParameters$_constructor_value_mode_to_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_mode_to_body(int value, int mode, slice to, cell body) inline;

;; $SendParameters$_constructor_value_mode_to_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_mode_to_bounce_body(int value, int mode, slice to, int bounce, cell body) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
